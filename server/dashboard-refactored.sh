#!/bin/bash

# ======================================================================
# MOTD Dashboard Management Script
# –í–µ—Ä—Å–∏—è: 2025.07.30 (Refactored)
# –ê–≤—Ç–æ—Ä: NeoNode.cc
# –û–ø–∏—Å–∞–Ω–∏–µ: –£—Å—Ç–∞–Ω–æ–≤–∫–∞, –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã–º MOTD –¥–∞—à–±–æ—Ä–¥–æ–º
# ======================================================================

set -euo pipefail  # –°—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º bash

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ö–û–ù–°–¢–ê–ù–¢–´ ===
readonly SCRIPT_VERSION="2025.07.30-refactored"
readonly REMOTE_URL="https://famebloody.github.io/server/dashboard-refactored.sh"

# –ü—É—Ç–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≥–ª–æ–±–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞)
readonly DEFAULT_DASHBOARD_FILE="/etc/update-motd.d/99-dashboard"
readonly DEFAULT_CONFIG_GLOBAL="/etc/motdrc"
readonly DEFAULT_MOTD_CONFIG_TOOL="/usr/local/bin/motd-config"

# –ü—É—Ç–∏ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
readonly BACKUP_BASE_DIR="/var/backups/motd"
readonly LOG_FILE="/var/log/motd_custom.log"

# === –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï ===
DASHBOARD_FILE="$DEFAULT_DASHBOARD_FILE"
CONFIG_GLOBAL="$DEFAULT_CONFIG_GLOBAL"
MOTD_CONFIG_TOOL="$DEFAULT_MOTD_CONFIG_TOOL"

# –†–µ–∂–∏–º—ã —Ä–∞–±–æ—Ç—ã
OPERATION_MODE="install"
FORCE_MODE=false
INSTALL_USER_MODE=false

# ======================================================================
# –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# ======================================================================

log_message() {
    local level="$1"
    local message="$2"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    local log_file="$LOG_FILE"
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥-—Ñ–∞–π–ª –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if [[ ! -f "$log_file" ]] && [[ "$INSTALL_USER_MODE" == false ]]; then
        sudo touch "$log_file" 2>/dev/null || log_file="$HOME/.motd_install.log"
    elif [[ "$INSTALL_USER_MODE" == true ]]; then
        log_file="$HOME/.motd_install.log"
    fi
    
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
    echo "[$timestamp] [$level] $message" >> "$log_file" 2>/dev/null || true
    
    # –í—ã–≤–æ–¥–∏–º –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
    case "$level" in
        "ERROR")   echo "‚ùå $message" ;;
        "WARNING") echo "‚ö†Ô∏è $message" ;;
        "INFO")    echo "‚ÑπÔ∏è $message" ;;
        *)         echo "$message" ;;
    esac
}

log_info() {
    log_message "INFO" "$1"
}

log_warning() {
    log_message "WARNING" "$1"
}

log_error() {
    log_message "ERROR" "$1"
}

# ======================================================================
# –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö
# ======================================================================

fatal_error() {
    local message="$1"
    local exit_code="${2:-1}"
    
    log_error "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: $message"
    echo "üí• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏."
    echo "üìã –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –ª–æ–≥-—Ñ–∞–π–ª–µ: $LOG_FILE"
    exit "$exit_code"
}

check_error() {
    local exit_code=$?
    local operation="$1"
    
    if [[ $exit_code -ne 0 ]]; then
        fatal_error "–û–ø–µ—Ä–∞—Ü–∏—è '$operation' –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: $exit_code)" $exit_code
    fi
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
cleanup_on_exit() {
    local exit_code=$?
    
    if [[ $exit_code -ne 0 ]]; then
        log_error "–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π (–∫–æ–¥: $exit_code)"
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        [[ -n "${TMP_FILE:-}" ]] && [[ -f "$TMP_FILE" ]] && rm -f "$TMP_FILE" 2>/dev/null || true
    fi
    
    exit $exit_code
}

trap cleanup_on_exit EXIT

# ======================================================================
# –§–£–ù–ö–¶–ò–ò –ü–û–ú–û–©–ò –ò –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò
# ======================================================================

show_help() {
    cat << EOF
üìã MOTD Dashboard Management Script - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã–º MOTD –¥–∞—à–±–æ—Ä–¥–æ–º

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
    bash dashboard.sh [–û–ü–¶–ò–ò]

–û–ü–¶–ò–ò:
    --install         –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π MOTD –¥–∞—à–±–æ—Ä–¥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
    --restore         –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ MOTD —Ñ–∞–π–ª—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    --help            –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

    --force           –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
    --not-root        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º (–±–µ–∑ root –ø—Ä–∞–≤)

–ü–†–ò–ú–ï–†–´:
    bash dashboard.sh                    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏
    bash dashboard.sh --force            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞
    bash dashboard.sh --restore          # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    bash dashboard.sh --not-root         # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

–§–ê–ô–õ–´:
    –õ–æ–≥:              $LOG_FILE
    –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏:  $BACKUP_BASE_DIR
    –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:     $CONFIG_GLOBAL

–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–°–õ–ï –£–°–¢–ê–ù–û–í–ö–ò:
    motd-config       # CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–æ–∫–æ–≤

–ü–æ–¥—Ä–æ–±–Ω–µ–µ: https://NeoNode.cc
EOF
}

configure_user_mode() {
    if [[ "$INSTALL_USER_MODE" == true ]]; then
        DASHBOARD_FILE="$HOME/.config/neonode/99-dashboard"
        MOTD_CONFIG_TOOL="$HOME/.local/bin/motd-config"
        CONFIG_GLOBAL="$HOME/.motdrc"
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        mkdir -p "$(dirname "$DASHBOARD_FILE")" "$(dirname "$MOTD_CONFIG_TOOL")"
        
        log_info "–ù–∞—Å—Ç—Ä–æ–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–∫–∏"
    fi
}

# ======================================================================
# –û–ë–†–ê–ë–û–¢–ö–ê –ê–†–ì–£–ú–ï–ù–¢–û–í –ö–û–ú–ê–ù–î–ù–û–ô –°–¢–†–û–ö–ò
# ======================================================================

parse_arguments() {
    for arg in "$@"; do
        case "$arg" in
            --install)
                OPERATION_MODE="install"
                ;;
            --restore)
                OPERATION_MODE="restore"
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            --force)
                FORCE_MODE=true
                ;;
            --not-root)
                INSTALL_USER_MODE=true
                ;;
            *)
                log_warning "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $arg"
                echo "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏"
                ;;
        esac
    done
    
    log_info "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: $OPERATION_MODE"
}

# ======================================================================
# –°–ò–°–¢–ï–ú–ê –†–ï–ó–ï–†–í–ù–û–ì–û –ö–û–ü–ò–†–û–í–ê–ù–ò–Ø
# ======================================================================

create_backup_directory() {
    local backup_dir="$BACKUP_BASE_DIR/$(date +%Y%m%d_%H%M%S)"
    
    if [[ "$INSTALL_USER_MODE" == true ]]; then
        backup_dir="$HOME/.motd_backups/$(date +%Y%m%d_%H%M%S)"
    fi
    
    if ! mkdir -p "$backup_dir"; then
        fatal_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: $backup_dir"
    fi
    
    log_info "–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π: $backup_dir"
    echo "$backup_dir"
}

find_existing_motd_files() {
    local files=()
    
    # –ü–æ–∏—Å–∫ –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö
    local search_paths=(
        "/etc/update-motd.d/"
        "/etc/motd"
        "/etc/motd.tail"
        "/etc/motd.dynamic"
        "/run/motd"
        "/run/motd.dynamic"
        "/var/run/motd"
        "/var/run/motd.dynamic"
    )
    
    for path in "${search_paths[@]}"; do
        if [[ -e "$path" ]]; then
            # –î–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –∏—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
            if [[ -d "$path" ]]; then
                while IFS= read -r -d '' file; do
                    files+=("$file")
                done < <(find "$path" -type f -print0 2>/dev/null)
            else
                files+=("$path")
            fi
        fi
    done
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º
    printf '%s\n' "${files[@]}" | sort -u
}

backup_existing_motd() {
    local backup_dir
    backup_dir=$(create_backup_directory)
    
    local backup_manifest="$backup_dir/backup_manifest.txt"
    local files_found=0
    
    log_info "–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö MOTD —Ñ–∞–π–ª–æ–≤..."
    echo "# MOTD Backup Manifest - $(date)" > "$backup_manifest"
    echo "# Original -> Backup" >> "$backup_manifest"
    
    while IFS= read -r original_file; do
        if [[ -n "$original_file" && -e "$original_file" ]]; then
            local backup_file="$backup_dir$(dirname "$original_file")"
            local filename=$(basename "$original_file")
            
            # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π –≤ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
            if ! mkdir -p "$backup_file"; then
                log_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é: $backup_file"
                continue
            fi
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤—Å–µ—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
            if cp -a "$original_file" "$backup_file/"; then
                echo "$original_file -> $backup_file/$filename" >> "$backup_manifest"
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                stat "$original_file" > "$backup_file/$filename.metadata" 2>/dev/null || true
                
                log_info "–°–æ—Ö—Ä–∞–Ω—ë–Ω: $original_file"
                ((files_found++))
            else
                log_error "–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: $original_file"
            fi
        fi
    done < <(find_existing_motd_files)
    
    if [[ $files_found -eq 0 ]]; then
        log_info "–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ MOTD —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        rmdir "$backup_dir" 2>/dev/null || true
        return 0
    fi
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    local latest_link
    if [[ "$INSTALL_USER_MODE" == true ]]; then
        latest_link="$HOME/.motd_backups/latest"
    else
        latest_link="$BACKUP_BASE_DIR/latest"
    fi
    
    rm -f "$latest_link" 2>/dev/null || true
    ln -sf "$backup_dir" "$latest_link"
    
    log_info "–†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –§–∞–π–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: $files_found"
    log_info "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $backup_dir"
    
    echo "$backup_dir"
}

remove_existing_motd() {
    log_info "–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö MOTD —Ñ–∞–π–ª–æ–≤..."
    local removed_count=0
    
    while IFS= read -r file; do
        if [[ -n "$file" && -e "$file" ]]; then
            if rm -f "$file" 2>/dev/null; then
                log_info "–£–¥–∞–ª—ë–Ω: $file"
                ((removed_count++))
            else
                log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å: $file"
            fi
        fi
    done < <(find_existing_motd_files)
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–µ –ø—Ä–∞–≤–∞ –¥–ª—è —Ñ–∞–π–ª–æ–≤ –≤ /etc/update-motd.d/
    if [[ -d "/etc/update-motd.d" && "$INSTALL_USER_MODE" == false ]]; then
        find /etc/update-motd.d/ -type f -not -name "99-dashboard" -exec chmod -x {} \; 2>/dev/null || true
        log_info "–û—Ç–∫–ª—é—á–µ–Ω—ã –æ—Å—Ç–∞–ª—å–Ω—ã–µ MOTD —Å–∫—Ä–∏–ø—Ç—ã –≤ /etc/update-motd.d/"
    fi
    
    log_info "–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –§–∞–π–ª–æ–≤ —É–¥–∞–ª–µ–Ω–æ: $removed_count"
}

# ======================================================================
# –°–ò–°–¢–ï–ú–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø
# ======================================================================

find_latest_backup() {
    local latest_link
    if [[ "$INSTALL_USER_MODE" == true ]]; then
        latest_link="$HOME/.motd_backups/latest"
    else
        latest_link="$BACKUP_BASE_DIR/latest"
    fi
    
    if [[ -L "$latest_link" && -d "$latest_link" ]]; then
        readlink -f "$latest_link"
    else
        # –ò—â–µ–º —Å–∞–º—É—é —Å–≤–µ–∂—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π
        local backup_base
        if [[ "$INSTALL_USER_MODE" == true ]]; then
            backup_base="$HOME/.motd_backups"
        else
            backup_base="$BACKUP_BASE_DIR"
        fi
        
        if [[ -d "$backup_base" ]]; then
            find "$backup_base" -maxdepth 1 -type d -name "[0-9]*_[0-9]*" | sort -r | head -n1
        fi
    fi
}

validate_backup() {
    local backup_dir="$1"
    
    if [[ ! -d "$backup_dir" ]]; then
        log_error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $backup_dir"
        return 1
    fi
    
    local manifest="$backup_dir/backup_manifest.txt"
    if [[ ! -f "$manifest" ]]; then
        log_warning "–ú–∞–Ω–∏—Ñ–µ—Å—Ç —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $manifest"
        return 1
    fi
    
    log_info "–ù–∞–π–¥–µ–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $backup_dir"
    return 0
}

restore_motd_backup() {
    log_info "–ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ MOTD –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
    
    local backup_dir
    backup_dir=$(find_latest_backup)
    
    if [[ -z "$backup_dir" ]]; then
        fatal_error "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."
    fi
    
    if ! validate_backup "$backup_dir"; then
        fatal_error "–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞: $backup_dir"
    fi
    
    log_info "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $backup_dir"
    
    # –£–¥–∞–ª—è–µ–º –Ω–∞—à MOTD –¥–∞—à–±–æ—Ä–¥
    if [[ -f "$DASHBOARD_FILE" ]]; then
        rm -f "$DASHBOARD_FILE"
        log_info "–£–¥–∞–ª—ë–Ω —Ñ–∞–π–ª –¥–∞—à–±–æ—Ä–¥–∞: $DASHBOARD_FILE"
    fi
    
    # –£–¥–∞–ª—è–µ–º CLI —É—Ç–∏–ª–∏—Ç—É
    if [[ -f "$MOTD_CONFIG_TOOL" ]]; then
        rm -f "$MOTD_CONFIG_TOOL"
        log_info "–£–¥–∞–ª–µ–Ω–∞ CLI —É—Ç–∏–ª–∏—Ç–∞: $MOTD_CONFIG_TOOL"
    fi
    
    # –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    if [[ -f "$CONFIG_GLOBAL" ]]; then
        rm -f "$CONFIG_GLOBAL"
        log_info "–£–¥–∞–ª—ë–Ω –∫–æ–Ω—Ñ–∏–≥: $CONFIG_GLOBAL"
    fi
    
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    local manifest="$backup_dir/backup_manifest.txt"
    local restored_count=0
    
    while IFS=' -> ' read -r original_path backup_path; do
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        [[ "$original_path" =~ ^#.*$ ]] && continue
        [[ -z "$original_path" ]] && continue
        
        if [[ -f "$backup_path" ]]; then
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            local target_dir=$(dirname "$original_path")
            mkdir -p "$target_dir" 2>/dev/null || true
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∞–π–ª
            if cp -a "$backup_path" "$original_path"; then
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                local metadata_file="$backup_path.metadata"
                if [[ -f "$metadata_file" ]]; then
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
                    local mode=$(grep "Access:" "$metadata_file" | head -n1 | sed 's/.*(\([0-9]*\).*/\1/')
                    [[ -n "$mode" ]] && chmod "$mode" "$original_path" 2>/dev/null || true
                fi
                
                log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: $original_path"
                ((restored_count++))
            else
                log_error "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è: $original_path"
            fi
        fi
    done < "$manifest"
    
    # –í–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ MOTD —Å–∫—Ä–∏–ø—Ç—ã
    if [[ -d "/etc/update-motd.d" && "$INSTALL_USER_MODE" == false ]]; then
        find /etc/update-motd.d/ -type f -exec chmod +x {} \; 2>/dev/null || true
        log_info "–í–∫–ª—é—á–µ–Ω—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ MOTD —Å–∫—Ä–∏–ø—Ç—ã"
    fi
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    rm -f /tmp/.motd_disabled /tmp/.motd_cache /tmp/.motd_update_check 2>/dev/null || true
    
    log_info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
    log_info "–§–∞–π–ª–æ–≤ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: $restored_count"
    echo ""
    echo "‚úÖ MOTD —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"
    echo "üìÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: $backup_dir"
    echo "üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: $restored_count"
    echo ""
    echo "üîÑ MOTD –≤–µ—Ä–Ω—ë—Ç—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—Ö–æ–¥–µ –≤ —Å–∏—Å—Ç–µ–º—É."
}

# ======================================================================
# –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô –ò –£–°–¢–ê–ù–û–í–ö–ê –ü–ê–ö–ï–¢–û–í
# ======================================================================

check_dependencies() {
    log_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—Ç–∏–ª–∏—Ç..."
    local missing=()
    local optional_missing=()
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    local required_commands=(curl hostname awk grep cut uname df free uptime)
    for cmd in "${required_commands[@]}"; do
        if ! command -v "$cmd" &>/dev/null; then
            missing+=("$cmd")
        fi
    done
    
    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ)
    local optional_commands=(top ip vnstat)
    for cmd in "${optional_commands[@]}"; do
        if ! command -v "$cmd" &>/dev/null; then
            optional_missing+=("$cmd")
        fi
    done
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
    if (( ${#missing[@]} )); then
        log_error "–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç: ${missing[*]}"
        echo "üõ† –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:"
        if [[ "$EUID" -eq 0 ]]; then
            echo "    apt update && apt install curl coreutils net-tools procps iproute2 -y"
        else
            echo "    sudo apt update && sudo apt install curl coreutils net-tools procps iproute2 -y"
        fi
        echo "üîÅ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É."
        fatal_error "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã"
    fi
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ–± –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç–∞—Ö
    if (( ${#optional_missing[@]} )); then
        log_warning "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã: ${optional_missing[*]}"
        echo "üí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:"
        if [[ "$EUID" -eq 0 ]]; then
            echo "    apt install vnstat sysstat iproute2 -y"
        else
            echo "    sudo apt install vnstat sysstat iproute2 -y"
        fi
        echo "üìù –°–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –Ω–∏—Ö, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é."
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É
        local install_optional="n"
        if [[ "$FORCE_MODE" == false ]] && [[ -t 0 ]]; then
            read -p "ü§ñ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? [y/N]: " install_optional < /dev/tty
        elif [[ "$FORCE_MODE" == true ]]; then
            log_info "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –≤ force-—Ä–µ–∂–∏–º–µ..."
            install_optional="y"
        fi
        
        if [[ "$install_optional" =~ ^[Yy]$ ]]; then
            install_optional_packages
        fi
    fi
}

install_optional_packages() {
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
    
    local install_cmd="apt update >/dev/null 2>&1 && apt install vnstat sysstat iproute2 -y"
    if [[ "$EUID" -ne 0 ]]; then
        install_cmd="sudo $install_cmd"
    fi
    
    if eval "$install_cmd"; then
        log_info "–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
        initialize_vnstat
    else
        log_warning "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"
    fi
}

initialize_vnstat() {
    if command -v vnstat >/dev/null 2>&1; then
        log_info "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è vnstat..."
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        local main_if
        main_if=$(ip route | grep default | awk '{print $5}' | head -n1 2>/dev/null)
        [[ -z "$main_if" ]] && main_if=$(ls /sys/class/net/ | grep -v lo | head -n1)
        
        if [[ -n "$main_if" ]]; then
            local vnstat_cmd="vnstat -i $main_if --create >/dev/null 2>&1 && systemctl enable vnstat >/dev/null 2>&1 && systemctl start vnstat >/dev/null 2>&1"
            if [[ "$EUID" -ne 0 ]]; then
                vnstat_cmd="sudo $vnstat_cmd"
            fi
            
            if eval "$vnstat_cmd"; then
                log_info "vnstat –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ $main_if"
            else
                log_warning "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ vnstat"
            fi
        else
            log_warning "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è vnstat"
        fi
    fi
}

# ======================================================================
# –°–û–ó–î–ê–ù–ò–ï –ò –£–°–¢–ê–ù–û–í–ö–ê –ö–û–ú–ü–û–ù–ï–ù–¢–û–í
# ======================================================================

install_motd_config() {
    log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ CLI —É—Ç–∏–ª–∏—Ç—ã motd-config –≤ $MOTD_CONFIG_TOOL"
    cat > "$MOTD_CONFIG_TOOL" << 'EOF'
#!/bin/bash

CONFIG_GLOBAL="/etc/motdrc"
CONFIG_USER="$HOME/.motdrc"
TARGET_FILE="$CONFIG_GLOBAL"

[ ! -w "$CONFIG_GLOBAL" ] && TARGET_FILE="$CONFIG_USER"

DASHBOARD_FILE_GLOBAL="/etc/update-motd.d/99-dashboard"
DASHBOARD_FILE_USER="$HOME/.config/neonode/99-dashboard"
TOOL_PATH_GLOBAL="/usr/local/bin/motd-config"
TOOL_PATH_USER="$HOME/.local/bin/motd-config"

OPTIONS=(
  SHOW_UPTIME
  SHOW_LOAD
  SHOW_CPU
  SHOW_RAM
  SHOW_DISK
  SHOW_NET
  SHOW_IP
  SHOW_DOCKER
  SHOW_SSH
  SHOW_SECURITY
  SHOW_UPDATES
  SHOW_AUTOUPDATES
)

print_menu() {
  echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ NeoNode MOTD"
  echo "1) –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –±–ª–æ–∫–∏"
  echo "2) –û—Ç–∫–ª—é—á–∏—Ç—å/–í–∫–ª—é—á–∏—Ç—å MOTD"
  echo "3) –û–±–Ω–æ–≤–∏—Ç—å MOTD-–¥–∞—à–±–æ—Ä–¥"
  echo "4) –ò—Å–ø—Ä–∞–≤–∏—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ MOTD"
  echo "5) –£–¥–∞–ª–∏—Ç—å MOTD-–¥–∞—à–±–æ—Ä–¥"
  echo "6) –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π MOTD"
  echo "0) –í—ã—Ö–æ–¥"
}

configure_blocks() {
  echo "–í—ã–±–µ—Ä–∏ –±–ª–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (y/n):"
  for VAR in "${OPTIONS[@]}"; do
    read -p "$VAR (y/n) [Y]: " val
    case "${val,,}" in
      y|"") echo "$VAR=true" ;;
      n)    echo "$VAR=false" ;;
      *)    echo "$VAR=true" ;;
    esac
  done > "$TARGET_FILE"
  echo "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ $TARGET_FILE"
}

toggle_motd() {
  DISABLE_FILE="/tmp/.motd_disabled"
  if [ -f "$DISABLE_FILE" ]; then
    rm -f "$DISABLE_FILE"
    echo "‚úÖ MOTD –≤–∫–ª—é—á–µ–Ω. –ë—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—Ö–æ–¥–µ."
  else
    touch "$DISABLE_FILE"
    echo "‚ùå MOTD –æ—Ç–∫–ª—é—á–µ–Ω. –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª $DISABLE_FILE"
    echo "üí° –î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ —Ñ–∞–π–ª."
  fi
}

update_dashboard() {
  echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ MOTD-–¥–∞—à–±–æ—Ä–¥–∞..."
  REMOTE_URL="https://famebloody.github.io/server/dashboard-refactored.sh"
  
  if ! curl -s --connect-timeout 5 "$REMOTE_URL" >/dev/null; then
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ $REMOTE_URL"
    echo "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    return 1
  fi
  
  echo "üì• –°–∫–∞—á–∏–≤–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é..."
  if curl -s "$REMOTE_URL" | bash -s -- --force; then
    echo "‚úÖ MOTD-–¥–∞—à–±–æ—Ä–¥ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!"
  else
    echo "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é:"
    echo "   bash <(curl -s $REMOTE_URL) --force"
  fi
}

fix_duplicate_motd() {
  echo "üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è MOTD..."
  
  if [ -d "/etc/update-motd.d" ]; then
    sudo find /etc/update-motd.d/ -type f -not -name "99-dashboard" -exec chmod -x {} \; 2>/dev/null
    echo "‚úÖ –û—Ç–∫–ª—é—á–µ–Ω—ã –≤—Å–µ MOTD —Å–∫—Ä–∏–ø—Ç—ã –∫—Ä–æ–º–µ 99-dashboard"
  fi
  
  for file in /etc/motd /run/motd.dynamic; do
    if [ -f "$file" ]; then
      sudo mv "$file" "${file}.disabled" 2>/dev/null
      echo "‚úÖ –û—Ç–∫–ª—é—á–µ–Ω —Ñ–∞–π–ª: $file"
    fi
  done
  
  DASHBOARD_COUNT=$(find /etc/update-motd.d/ -name "*dashboard*" -type f | wc -l)
  if [ "$DASHBOARD_COUNT" -gt 1 ]; then
    echo "‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ $DASHBOARD_COUNT —Ñ–∞–π–ª–æ–≤ dashboard!"
    find /etc/update-motd.d/ -name "*dashboard*" -type f -exec ls -la {} \;
    echo "üõ† –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ 99-dashboard..."
    sudo find /etc/update-motd.d/ -name "*dashboard*" -not -name "99-dashboard" -delete 2>/dev/null
  fi
  
  echo "‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!"
}

restore_original_motd() {
  echo "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ MOTD –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏..."
  bash <(curl -s https://famebloody.github.io/server/dashboard.sh) --restore
}

uninstall_dashboard() {
  echo "‚ö†Ô∏è –≠—Ç–æ —É–¥–∞–ª–∏—Ç MOTD-–¥–∞—à–±–æ—Ä–¥, CLI –∏ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
  read -p "–¢—ã —É–≤–µ—Ä–µ–Ω? (y/N): " confirm
  if [[ "$confirm" =~ ^[Yy]$ ]]; then
    echo "üóë –£–¥–∞–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥ –∏ –∫–æ–Ω—Ñ–∏–≥–∏..."

    sudo rm -f "$DASHBOARD_FILE_GLOBAL"
    rm -f "$DASHBOARD_FILE_USER"

    sudo rm -f "$TOOL_PATH_GLOBAL"
    rm -f "$TOOL_PATH_USER"

    sudo rm -f "$CONFIG_GLOBAL"
    rm -f "$CONFIG_USER"
    
    rm -f /tmp/.motd_disabled
    rm -f /tmp/.motd_cache
    rm -f /tmp/.motd_update_check

    for file in /etc/motd.disabled /run/motd.dynamic.disabled; do
      if [ -f "$file" ]; then
        original_file="${file%.disabled}"
        sudo mv "$file" "$original_file" 2>/dev/null
        echo "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∞–π–ª: $original_file"
      fi
    done

    if [ -d "/etc/update-motd.d" ]; then
      sudo find /etc/update-motd.d/ -type f -exec chmod +x {} \; 2>/dev/null
    fi

    echo "‚úÖ –í—Å—ë —É–¥–∞–ª–µ–Ω–æ. MOTD –≤–µ—Ä–Ω—ë—Ç—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É."
  else
    echo "‚ùå –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è."
  fi
}

while true; do
  print_menu
  read -p "–í—ã–±–æ—Ä: " choice
  case "$choice" in
    1) configure_blocks ;;
    2) toggle_motd ;;
    3) update_dashboard ;;
    4) fix_duplicate_motd ;;
    5) uninstall_dashboard ;;
    6) restore_original_motd ;;
    0) exit ;;
    *) echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥" ;;
  esac
  echo ""
done 
EOF

    chmod +x "$MOTD_CONFIG_TOOL"
    check_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ CLI —É—Ç–∏–ª–∏—Ç—ã motd-config"
    log_info "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ CLI —É—Ç–∏–ª–∏—Ç–∞: $MOTD_CONFIG_TOOL"
}

create_motd_global_config() {
    if [[ ! -f "$CONFIG_GLOBAL" ]]; then
        cat > "$CONFIG_GLOBAL" << EOF
SHOW_UPTIME=true
SHOW_LOAD=true
SHOW_CPU=true
SHOW_RAM=true
SHOW_DISK=true
SHOW_NET=true
SHOW_IP=true
SHOW_DOCKER=true
SHOW_SSH=true
SHOW_SECURITY=true
SHOW_UPDATES=true
SHOW_AUTOUPDATES=true
EOF
        check_error "–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞"
        log_info "–°–æ–∑–¥–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: $CONFIG_GLOBAL"
    else
        log_info "–ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $CONFIG_GLOBAL"
    fi
}

create_dashboard_file() {
    local tmp_file
    tmp_file=$(mktemp)
    
    log_info "–°–æ–∑–¥–∞–Ω–∏–µ MOTD dashboard —Ñ–∞–π–ª–∞..."
    
    cat > "$tmp_file" << 'EOF'
#!/bin/bash

# –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—ã—Å—Ç—Ä–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ MOTD
if [[ -f "/tmp/.motd_disabled" ]] || [[ "$SSH_CLIENT_IP" = "DISABLED" ]]; then
    exit 0
fi

# –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –¢–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ–¥–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
exec_with_timeout() {
    local exit_code
    timeout 3 "$@" 2>/dev/null
    exit_code=$?
    
    # timeout –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 124 –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏, 
    # –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –∫–æ–º–∞–Ω–¥—ã
    if [[ $exit_code -eq 124 ]]; then
        echo "timeout"
        return 1
    else
        return $exit_code
    fi
}

CURRENT_VERSION="2025.07.30-refactored"

# –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —á–∞—Å
UPDATE_CHECK_FILE="/tmp/.motd_update_check"
if [[ ! -f "$UPDATE_CHECK_FILE" ]] || [[ $(($(date +%s) - $(stat -c %Y "$UPDATE_CHECK_FILE" 2>/dev/null || echo 0))) -gt 3600 ]]; then
    REMOTE_URL="https://famebloody.github.io/server/dashboard.sh"
    REMOTE_VERSION=$(exec_with_timeout curl -s --connect-timeout 2 "$REMOTE_URL" | grep '^CURRENT_VERSION=' | cut -d= -f2 | tr -d '"')
    
    if [[ -n "$REMOTE_VERSION" ]] && [[ "$REMOTE_VERSION" != "$CURRENT_VERSION" ]]; then
        echo "‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è MOTD-–¥–∞—à–±–æ—Ä–¥–∞: $REMOTE_VERSION (—Ç–µ–∫—É—â–∞—è: $CURRENT_VERSION)"
        echo "üí° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: bash <(curl -s $REMOTE_URL) --force"
        echo ""
    fi
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –æ—Ç–º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    touch "$UPDATE_CHECK_FILE" 2>/dev/null
fi

ok="‚úÖ"
fail="‚ùå"
warn="‚ö†Ô∏è"
separator="‚îÄ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

CONFIG_GLOBAL="/etc/motdrc"
CONFIG_USER="$HOME/.motdrc"
[[ -f "$CONFIG_GLOBAL" ]] && source "$CONFIG_GLOBAL"
[[ -f "$CONFIG_USER" ]] && source "$CONFIG_USER"

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
: "${SHOW_UPTIME:=true}"
: "${SHOW_LOAD:=true}"
: "${SHOW_CPU:=true}"
: "${SHOW_RAM:=true}"
: "${SHOW_DISK:=true}"
: "${SHOW_NET:=true}"
: "${SHOW_IP:=true}"
: "${SHOW_DOCKER:=true}"
: "${SHOW_SSH:=true}"
: "${SHOW_SECURITY:=true}"
: "${SHOW_UPDATES:=true}"
: "${SHOW_AUTOUPDATES:=true}"

# –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
CACHE_FILE="/tmp/.motd_cache"
CACHE_TIME=30

if [[ -f "$CACHE_FILE" ]] && [[ $(($(date +%s) - $(stat -c %Y "$CACHE_FILE"))) -lt $CACHE_TIME ]]; then
    source "$CACHE_FILE"
else
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª
    uptime_str=$(exec_with_timeout uptime -p || echo "uptime unavailable")
    loadavg=$(exec_with_timeout cat /proc/loadavg | cut -d ' ' -f1-3 || echo "load unavailable")
    
    # CPU usage —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è top
    if command -v top >/dev/null 2>&1; then
        cpu_usage=$(exec_with_timeout top -bn1 | grep "Cpu(s)" | awk '{print 100 - $8 "%"}' | head -1)
        [[ -z "$cpu_usage" ]] && cpu_usage="n/a"
    else
        cpu_usage="top not available"
    fi
    
    mem_data=$(exec_with_timeout free -m | awk '/Mem:/ {printf "%.0f%% (%dMB/%dMB)", $3/$2*100, $3, $2}' || echo "memory info unavailable")
    
    disk_used=$(exec_with_timeout df -h / | awk 'NR==2 {print $5}' | tr -d '%' || echo "0")
    disk_line=$(exec_with_timeout df -h / | awk 'NR==2 {print $5 " (" $3 " / " $2 ")"}' || echo "disk info unavailable")
    
    if [[ "$disk_used" -ge 95 ]] 2>/dev/null; then
        disk_status="$fail $disk_line [CRITICAL: Free up space immediately!]"
    elif [[ "$disk_used" -ge 85 ]] 2>/dev/null; then
        disk_status="$warn $disk_line [Warning: High usage]"
    else
        disk_status="$ok $disk_line"
    fi

    # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: vnstat –∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª–µ
    if command -v vnstat >/dev/null 2>&1; then
        traffic=$(exec_with_timeout vnstat --oneline | awk -F\; '{print $10 " ‚Üì / " $11 " ‚Üë"}')
        [[ -z "$traffic" ]] && traffic="vnstat: no data yet"
    else
        traffic="vnstat not installed"
    fi
    
    ip_local=$(exec_with_timeout hostname -I | awk '{print $1}' || echo "n/a")
    
    # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—É–±–ª–∏—á–Ω—ã–π IP —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
    ip_public=$(exec_with_timeout curl -s --connect-timeout 1 --max-time 2 ifconfig.me || echo "n/a")
    
    # NetBird IP –ø—Ä–æ–≤–µ—Ä–∫–∞
    if command -v netbird >/dev/null 2>&1; then
        netbird_ip=$(exec_with_timeout netbird status | grep "NetBird IP:" | awk '{print $3}' | cut -d'/' -f1)
        [[ -z "$netbird_ip" ]] && netbird_ip="not connected"
    else
        netbird_ip="not installed"
    fi
    
    # IPv6 —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è ip –∫–æ–º–∞–Ω–¥—ã
    if command -v ip >/dev/null 2>&1; then
        ip6=$(exec_with_timeout ip -6 addr show scope global | grep inet6 | awk '{print $2}' | cut -d/ -f1 | head -n1)
    else
        ip6="ip command not available"
    fi
    [[ -z "$ip6" ]] && ip6="n/a"

    # Docker –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    if command -v docker >/dev/null 2>&1 && docker info >/dev/null 2>&1; then
        docker_total=$(exec_with_timeout docker ps -a -q | wc -l)
        docker_running=$(exec_with_timeout docker ps -q | wc -l)
        docker_stopped=$((docker_total - docker_running))
        docker_msg="$ok ${docker_running} running / ${docker_stopped} stopped"
        
        bad_containers=$(exec_with_timeout docker ps -a --filter "status=exited" --filter "status=restarting" --format '‚õî {{.Names}} ({{.Status}})' | head -3)
        if [[ -n "$bad_containers" ]]; then
            docker_msg="$fail Issues: $docker_running running / $docker_stopped stopped"
            docker_msg_extra=$(echo "$bad_containers" | sed 's/^/                    /')
        fi
    else
        docker_msg="$warn not available"
    fi

    ssh_users=$(exec_with_timeout who | wc -l)
    ssh_ips=$(exec_with_timeout who | awk '{print $5}' | tr -d '()' | sort | uniq | paste -sd ', ' -)

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    if command -v fail2ban-client >/dev/null 2>&1 && exec_with_timeout fail2ban-client status >/dev/null 2>&1; then
        fail2ban_status="$ok active"
    else
        fail2ban_status="$fail not available"
    fi

    if command -v ufw >/dev/null 2>&1; then
        ufw_status=$(exec_with_timeout ufw status | grep -i "Status" | awk '{print $2}')
        if [[ "$ufw_status" == "active" ]]; then
            ufw_status="$ok enabled"
        else
            ufw_status="$fail disabled"
        fi
    else
        ufw_status="$fail not installed"
    fi

    if exec_with_timeout systemctl is-active crowdsec >/dev/null 2>&1; then
        crowdsec_status="$ok active"
    else
        crowdsec_status="$fail not running"
    fi

    # SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    ssh_port=$(grep -Ei '^Port ' /etc/ssh/sshd_config 2>/dev/null | awk '{print $2}' | head -n1)
    [[ -z "$ssh_port" ]] && ssh_port=22
    [[ "$ssh_port" != "22" ]] && ssh_port_status="$ok non-standard port ($ssh_port)" || ssh_port_status="$warn default port (22)"

    permit_root=$(exec_with_timeout sshd -T 2>/dev/null | grep -i permitrootlogin | awk '{print $2}')
    case "$permit_root" in
        yes) root_login_status="$fail enabled" ;;
        no) root_login_status="$ok disabled" ;;
        *) root_login_status="$warn limited ($permit_root)" ;;
    esac

    password_auth=$(grep -Ei '^PasswordAuthentication' /etc/ssh/sshd_config 2>/dev/null | awk '{print $2}')
    [[ "$password_auth" != "yes" ]] && password_auth_status="$ok disabled" || password_auth_status="$fail enabled"

    # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    updates=$(exec_with_timeout apt list --upgradable 2>/dev/null | grep -v "Listing" | wc -l)
    update_msg="${updates} package(s) can be updated"

    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    auto_update_status=""
    if dpkg -s unattended-upgrades >/dev/null 2>&1 && command -v unattended-upgrade >/dev/null 2>&1; then
        if grep -q 'Unattended-Upgrade "1";' /etc/apt/apt.conf.d/20auto-upgrades 2>/dev/null; then
            if exec_with_timeout systemctl is-enabled apt-daily.timer >/dev/null 2>&1 && exec_with_timeout systemctl is-enabled apt-daily-upgrade.timer >/dev/null 2>&1; then
                if grep -q "Installing" /var/log/unattended-upgrades/unattended-upgrades.log 2>/dev/null; then
                    auto_update_status="$ok working"
                else
                    auto_update_status="$ok enabled"
                fi
            else
                auto_update_status="$warn config enabled, timers disabled"
            fi
        else
            auto_update_status="$warn installed, config disabled"
        fi
    else
        auto_update_status="$fail not installed"
    fi

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    cat > "$CACHE_FILE" << CACHE_EOF
uptime_str="$uptime_str"
loadavg="$loadavg"
cpu_usage="$cpu_usage"
mem_data="$mem_data"
disk_status="$disk_status"
traffic="$traffic"
ip_local="$ip_local"
ip_public="$ip_public"
netbird_ip="$netbird_ip"
ip6="$ip6"
docker_msg="$docker_msg"
docker_msg_extra="$docker_msg_extra"
ssh_users="$ssh_users"
ssh_ips="$ssh_ips"
fail2ban_status="$fail2ban_status"
ufw_status="$ufw_status"
crowdsec_status="$crowdsec_status"
ssh_port_status="$ssh_port_status"
root_login_status="$root_login_status"
password_auth_status="$password_auth_status"
update_msg="$update_msg"
auto_update_status="$auto_update_status"
CACHE_EOF
fi

print_row() {
    local label="$1"
    local value="$2"
    printf " %-20s : %s\n" "$label" "$value"
}

print_section() {
  case "$1" in
    uptime)       print_row "System Uptime" "$uptime_str" ;;
    load)         print_row "Load Average" "$loadavg" ;;
    cpu)          print_row "CPU Usage" "$cpu_usage" ;;
    kernel)       print_row "Kernel" "$(uname -r)" ;;
    ram)          print_row "RAM Usage" "$mem_data" ;;
    disk)         print_row "Disk Usage" "$disk_status" ;;
    net)          print_row "Net Traffic" "$traffic" ;;
    ip)           
      # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å IP-–∞–¥—Ä–µ—Å–∞–º–∏
      ip_info="Local: $ip_local / Public: $ip_public"
      ip_info="$ip_info / IPv6: $ip6"
      print_row "IPv4/IPv6" "$ip_info"
      if [[ "$netbird_ip" != "not installed" ]]; then
        print_row "NetBird" "$netbird_ip"
      fi
      ;;
    docker)
      print_row "Docker" "$docker_msg"
      [[ -n "$docker_msg_extra" ]] && echo -e "$docker_msg_extra"
      ;;
    updates)      print_row "Apt Updates" "$update_msg" ;;
    autoupdates)
      print_row "Auto Updates" "$auto_update_status"
      case "$auto_update_status" in
        *"$fail"*)
          echo "üìå Auto-Upgrades not installed. To install and enable:"
          echo "   apt install unattended-upgrades -y"
          echo "   dpkg-reconfigure --priority=low unattended-upgrades"
          ;;
        *"timers disabled"*)
          echo "üìå Auto-Upgrades config enabled, but timers are off. To enable:"
          echo "   systemctl enable --now apt-daily.timer apt-daily-upgrade.timer"
          ;;
        *"config disabled"*)
          echo "üìå Auto-Upgrades installed, but config disabled. To fix:"
          echo "   echo 'APT::Periodic::Unattended-Upgrade \"1\";' >> /etc/apt/apt.conf.d/20auto-upgrades"
          echo "   systemctl restart apt-daily.timer apt-daily-upgrade.timer"
          ;;
      esac
      ;;
    ssh_block)
      echo " ~~~~~~ ‚Üì‚Üì‚Üì Security Block ‚Üì‚Üì‚Üì ~~~~~~"
      print_row "Fail2ban" "$fail2ban_status"
      print_row "CrowdSec" "$crowdsec_status"
      print_row "UFW Firewall" "$ufw_status"
      print_row "SSH Port" "$ssh_port_status"
      print_row "Root Login" "$root_login_status"
      print_row "Password Auth" "$password_auth_status"
      print_row "SSH Sessions" "$ssh_users"
      print_row "SSH IPs" "$ssh_ips"
      echo " ~~~~~~ ‚Üë‚Üë‚Üë Security Block ‚Üë‚Üë‚Üë ~~~~~~"
      ;;
  esac
}

echo "$separator"
echo " MOTD Dashboard ‚Äî powered by https://NeoNode.cc"
echo "$separator"
[[ "$SHOW_UPTIME" = true ]] && print_section uptime
[[ "$SHOW_LOAD" = true ]] && print_section load
[[ "$SHOW_CPU" = true ]] && print_section cpu
print_section kernel
[[ "$SHOW_RAM" = true ]] && print_section ram
[[ "$SHOW_DISK" = true ]] && print_section disk
[[ "$SHOW_NET" = true ]] && print_section net
[[ "$SHOW_IP" = true ]] && print_section ip
[[ "$SHOW_DOCKER" = true ]] && print_section docker
[[ "$SHOW_SECURITY" = true ]] && print_section ssh_block
[[ "$SHOW_UPDATES" = true ]] && print_section updates
[[ "$SHOW_AUTOUPDATES" = true ]] && print_section autoupdates

echo ""
printf " %-20s : %s\n" "Dashboard Ver" "$CURRENT_VERSION"
echo "$separator"
printf " %-20s : %s\n" "Config tool" "motd-config"
EOF

    echo "$tmp_file"
}

# ======================================================================
# –û–°–ù–û–í–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò
# ======================================================================

perform_installation() {
    log_info "–ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É MOTD –¥–∞—à–±–æ—Ä–¥–∞..."
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if [[ "$EUID" -ne 0 ]] && [[ "$INSTALL_USER_MODE" == false ]]; then
        fatal_error "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Ç root –∏–ª–∏ —Å —Ñ–ª–∞–≥–æ–º --not-root"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ—Å–æ–±–∞ –∑–∞–ø—É—Å–∫–∞
    if [[ ! -t 0 ]]; then
        log_info "–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ pipe (wget/curl). –í–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º."
        FORCE_MODE=true
        echo "üí° –î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å–∫–∞—á–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç: wget https://famebloody.github.io/server/dashboard.sh && bash dashboard.sh"
        echo ""
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏
    backup_existing_motd
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö MOTD —Ñ–∞–π–ª–æ–≤
    remove_existing_motd
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    if [[ "$INSTALL_USER_MODE" == false ]]; then
        mkdir -p /etc/update-motd.d
        check_error "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ /etc/update-motd.d"
    fi
    
    # –°–æ–∑–¥–∞–Ω–∏–µ dashboard —Ñ–∞–π–ª–∞
    local tmp_dashboard
    tmp_dashboard=$(create_dashboard_file)
    
    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    echo "===================================================="
    echo "üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä NeoNode MOTD (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è):"
    echo "===================================================="
    bash "$tmp_dashboard"
    echo "===================================================="
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    local confirm="y"
    if [[ "$FORCE_MODE" == false ]] && [[ -t 0 ]]; then
        echo "–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞:"
        echo "üëâ –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–∞—à–±–æ—Ä–¥: $DASHBOARD_FILE"
        echo "üëâ –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ CLI —É—Ç–∏–ª–∏—Ç–∞: $MOTD_CONFIG_TOOL"
        echo "üëâ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: $CONFIG_GLOBAL"
        echo ""
        echo "üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:"
        echo "   ‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ 30 —Å–µ–∫—É–Ω–¥"
        echo "   ‚Ä¢ –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ (3 —Å–µ–∫)"
        echo "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞–∑ –≤ —á–∞—Å"
        echo "   ‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ motd-config"
        echo "   ‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
        echo ""
        
        read -p '‚ùì –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π MOTD-–¥—ç—à–±–æ—Ä–¥? [y/N]: ' confirm < /dev/tty
    fi
    
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ dashboard —Ñ–∞–π–ª–∞
        mv "$tmp_dashboard" "$DASHBOARD_FILE"
        check_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ dashboard —Ñ–∞–π–ª–∞"
        
        if [[ "$INSTALL_USER_MODE" == false ]]; then
            chmod +x "$DASHBOARD_FILE"
            check_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞ dashboard —Ñ–∞–π–ª"
        fi
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ CLI —É—Ç–∏–ª–∏—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        install_motd_config
        create_motd_global_config
        
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"
        echo ""
        echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥: $DASHBOARD_FILE"
        echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ CLI —É—Ç–∏–ª–∏—Ç–∞: $MOTD_CONFIG_TOOL"
        echo "‚úÖ –°–æ–∑–¥–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: $CONFIG_GLOBAL"
        echo ""
        echo "üöÄ –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:"
        echo "   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ"
        echo "   ‚Ä¢ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ MOTD —á–µ—Ä–µ–∑ --restore"
        echo "   ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ $LOG_FILE"
        echo "   ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"
        echo ""
        echo "üëâ –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: motd-config"
        echo "üëâ –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ MOTD ‚Äî –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: $(basename "$0") --restore"
        echo "üëâ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π MOTD –ø–æ—è–≤–∏—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—Ö–æ–¥–µ"
        
    else
        rm -f "$tmp_dashboard"
        log_info "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
        echo "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
    fi
}

# ======================================================================
# –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø
# ======================================================================

main() {
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    parse_arguments "$@"
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–∂–∏–º–æ–≤
    configure_user_mode
    
    # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
    log_info "–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞, —Ä–µ–∂–∏–º: $OPERATION_MODE, –≤–µ—Ä—Å–∏—è: $SCRIPT_VERSION"
    log_info "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º: $INSTALL_USER_MODE, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: $FORCE_MODE"
    
    case "$OPERATION_MODE" in
        "install")
            check_dependencies
            perform_installation
            ;;
        "restore")
            restore_motd_backup
            ;;
        *)
            fatal_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: $OPERATION_MODE"
            ;;
    esac
    
    log_info "–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ"
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main "$@"
