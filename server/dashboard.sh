#!/bin/bash

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
DASHBOARD_FILE="/etc/update-motd.d/99-dashboard"
CONFIG_GLOBAL="/etc/motdrc"
MOTD_CONFIG_TOOL="/usr/local/bin/motd-config"

FORCE_MODE=false
INSTALL_USER_MODE=false

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ ===
for arg in "$@"; do
    case $arg in
        --force)
            FORCE_MODE=true
            ;;
        --not-root)
            INSTALL_USER_MODE=true
            ;;
    esac
done

if [ "$INSTALL_USER_MODE" = true ]; then
    DASHBOARD_FILE="$HOME/.config/neonode/99-dashboard"
    MOTD_CONFIG_TOOL="$HOME/.local/bin/motd-config"
    CONFIG_GLOBAL="$HOME/.motdrc"
    mkdir -p "$(dirname "$DASHBOARD_FILE")" "$(dirname "$MOTD_CONFIG_TOOL")"
fi

# === –§—É–Ω–∫—Ü–∏—è: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ CLI —É—Ç–∏–ª–∏—Ç—ã motd-config ===
install_motd_config() {
    echo "üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ CLI —É—Ç–∏–ª–∏—Ç—ã motd-config –≤ $MOTD_CONFIG_TOOL"
    cat > "$MOTD_CONFIG_TOOL" << 'EOF'
#!/bin/bash

CONFIG_GLOBAL="/etc/motdrc"
CONFIG_USER="$HOME/.motdrc"
TARGET_FILE="$CONFIG_GLOBAL"

[ ! -w "$CONFIG_GLOBAL" ] && TARGET_FILE="$CONFIG_USER"

DASHBOARD_FILE_GLOBAL="/etc/update-motd.d/99-dashboard"
DASHBOARD_FILE_USER="$HOME/.config/neonode/99-dashboard"
TOOL_PATH_GLOBAL="/usr/local/bin/motd-config"
TOOL_PATH_USER="$HOME/.local/bin/motd-config"

OPTIONS=(
  SHOW_UPTIME
  SHOW_LOAD
  SHOW_CPU
  SHOW_RAM
  SHOW_DISK
  SHOW_NET
  SHOW_IP
  SHOW_DOCKER
  SHOW_SSH
  SHOW_SECURITY
  SHOW_UPDATES
  SHOW_AUTOUPDATES
)

print_menu() {
  echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ NeoNode MOTD"
  echo "1) –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –±–ª–æ–∫–∏"
  echo "2) –£–¥–∞–ª–∏—Ç—å MOTD-–¥–∞—à–±–æ—Ä–¥"
  echo "0) –í—ã—Ö–æ–¥"
}

configure_blocks() {
  echo "–í—ã–±–µ—Ä–∏ –±–ª–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (y/n):"
  for VAR in "${OPTIONS[@]}"; do
    read -p "$VAR (y/n) [Y]: " val
    case "${val,,}" in
      y|"") echo "$VAR=true" ;;
      n)    echo "$VAR=false" ;;
      *)    echo "$VAR=true" ;;
    esac
  done > "$TARGET_FILE"
  echo "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ $TARGET_FILE"
}

uninstall_dashboard() {
  echo "‚ö†Ô∏è –≠—Ç–æ —É–¥–∞–ª–∏—Ç MOTD-–¥–∞—à–±–æ—Ä–¥, CLI –∏ –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
  read -p "–¢—ã —É–≤–µ—Ä–µ–Ω? (y/N): " confirm
  if [[ "$confirm" =~ ^[Yy]$ ]]; then
    echo "üóë –£–¥–∞–ª—è–µ–º –¥–∞—à–±–æ—Ä–¥ –∏ –∫–æ–Ω—Ñ–∏–≥–∏..."

    sudo rm -f "$DASHBOARD_FILE_GLOBAL"
    rm -f "$DASHBOARD_FILE_USER"

    sudo rm -f "$TOOL_PATH_GLOBAL"
    rm -f "$TOOL_PATH_USER"

    sudo rm -f "$CONFIG_GLOBAL"
    rm -f "$CONFIG_USER"

    echo "‚úÖ –í—Å—ë —É–¥–∞–ª–µ–Ω–æ. MOTD –≤–µ—Ä–Ω—ë—Ç—Å—è –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É –≤–∏–¥—É."
  else
    echo "‚ùå –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è."
  fi
}

while true; do
  print_menu
  read -p "–í—ã–±–æ—Ä: " choice
  case "$choice" in
    1) configure_blocks ;;
    2) uninstall_dashboard ;;
    0) exit ;;
    *) echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥" ;;
  esac
done 

echo "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ $TARGET_FILE"
EOF

    chmod +x "$MOTD_CONFIG_TOOL"
    echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ CLI —É—Ç–∏–ª–∏—Ç–∞: $MOTD_CONFIG_TOOL"
}

# === –§—É–Ω–∫—Ü–∏—è: –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞ ===
create_motd_global_config() {
    if [ ! -f "$CONFIG_GLOBAL" ]; then
        cat > "$CONFIG_GLOBAL" << EOF
SHOW_UPTIME=true
SHOW_LOAD=true
SHOW_CPU=true
SHOW_RAM=true
SHOW_DISK=true
SHOW_NET=true
SHOW_IP=true
SHOW_DOCKER=true
SHOW_SSH=true
SHOW_SECURITY=true
SHOW_UPDATES=true
SHOW_AUTOUPDATES=true
EOF
        echo "‚úÖ –°–æ–∑–¥–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: $CONFIG_GLOBAL"
    else
        echo "‚ÑπÔ∏è –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $CONFIG_GLOBAL"
    fi
}

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–æ—Å–æ–±–∞ –∑–∞–ø—É—Å–∫–∞ ===
if [ ! -t 0 ]; then
    echo "üåê –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω —á–µ—Ä–µ–∑ pipe (wget/curl). –í–∫–ª—é—á–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º."
    FORCE_MODE=true
    echo "üí° –î–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ —Å–∫–∞—á–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç: wget https://famebloody.github.io/server/dashboard.sh && bash dashboard.sh"
    echo ""
fi

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ ===
if [ "$EUID" -ne 0 ] && [ "$INSTALL_USER_MODE" = false ]; then
    echo "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏ –æ—Ç root –∏–ª–∏ —Å —Ñ–ª–∞–≥–æ–º --not-root"
    exit 1
fi

TMP_FILE=$(mktemp)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ===
echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —É—Ç–∏–ª–∏—Ç..."
MISSING=()
OPTIONAL_MISSING=()

# –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
for CMD in curl hostname awk grep cut uname df free uptime; do
    if ! command -v "$CMD" &>/dev/null; then
        MISSING+=("$CMD")
    fi
done

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ)
for CMD in top ip vnstat; do
    if ! command -v "$CMD" &>/dev/null; then
        OPTIONAL_MISSING+=("$CMD")
    fi
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã
if (( ${#MISSING[@]} )); then
    echo "‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç: ${MISSING[*]}"
    echo "üõ† –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π:"
    if [ "$EUID" -eq 0 ]; then
        echo "    apt update && apt install curl coreutils net-tools procps iproute2 -y"
    else
        echo "    sudo apt update && sudo apt install curl coreutils net-tools procps iproute2 -y"
    fi
    echo "üîÅ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É."
    exit 1
fi

# –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º –æ–± –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç–∞—Ö
if (( ${#OPTIONAL_MISSING[@]} )); then
    echo "‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã: ${OPTIONAL_MISSING[*]}"
    echo "üí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:"
    if [ "$EUID" -eq 0 ]; then
        echo "    apt install vnstat sysstat iproute2 -y"
    else
        echo "    sudo apt install vnstat sysstat iproute2 -y"
    fi
    echo "üìù –°–∫—Ä–∏–ø—Ç –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –Ω–∏—Ö, –Ω–æ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é."
    
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É
    if [ "$FORCE_MODE" = false ] && [ -t 0 ]; then
        read -p "ü§ñ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏? [y/N]: " install_optional < /dev/tty
        if [[ "$install_optional" =~ ^[Yy]$ ]]; then
            install_optional="y"
        fi
    elif [ "$FORCE_MODE" = true ]; then
        echo "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –≤ pipe-—Ä–µ–∂–∏–º–µ..."
        install_optional="y"
    fi
    
    if [[ "$install_optional" =~ ^[Yy]$ ]]; then
            echo "üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞–∫–µ—Ç—ã..."
            if [ "$EUID" -eq 0 ]; then
                apt update >/dev/null 2>&1
                apt install vnstat sysstat iproute2 -y
            else
                sudo apt update >/dev/null 2>&1
                sudo apt install vnstat sysstat iproute2 -y
            fi
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º vnstat –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if command -v vnstat >/dev/null 2>&1; then
                echo "üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º vnstat..."
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ç–µ–≤–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                MAIN_IF=$(ip route | grep default | awk '{print $5}' | head -n1)
                if [ -n "$MAIN_IF" ]; then
                    if [ "$EUID" -eq 0 ]; then
                        vnstat -i "$MAIN_IF" --create >/dev/null 2>&1
                        systemctl enable vnstat >/dev/null 2>&1
                        systemctl start vnstat >/dev/null 2>&1
                    else
                        sudo vnstat -i "$MAIN_IF" --create >/dev/null 2>&1
                        sudo systemctl enable vnstat >/dev/null 2>&1
                        sudo systemctl start vnstat >/dev/null 2>&1
                    fi
                    echo "‚úÖ vnstat –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ $MAIN_IF"
                fi
            fi
        fi
    fi
    echo ""
fi

# === –°–æ–∑–¥–∞–Ω–∏–µ dashboard-—Ñ–∞–π–ª–∞ ===
if [ "$INSTALL_USER_MODE" = false ]; then
    mkdir -p /etc/update-motd.d
fi

cat > "$TMP_FILE" << 'EOF'
#!/bin/bash

# –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±—ã—Å—Ç—Ä–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ MOTD
if [ -f "/tmp/.motd_disabled" ] || [ "$SSH_CLIENT_IP" = "DISABLED" ]; then
    exit 0
fi

# –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –¢–∞–π–º–∞—É—Ç –¥–ª—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
exec_with_timeout() {
    timeout 3 "$@" 2>/dev/null || echo "timeout"
}

CURRENT_VERSION="2025.05.09"

# –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ —Ä–∞–∑ –≤ —á–∞—Å
UPDATE_CHECK_FILE="/tmp/.motd_update_check"
if [ ! -f "$UPDATE_CHECK_FILE" ] || [ $(($(date +%s) - $(stat -c %Y "$UPDATE_CHECK_FILE" 2>/dev/null || echo 0))) -gt 3600 ]; then
    REMOTE_URL="https://dignezzz.github.io/server/dashboard.sh"
    REMOTE_VERSION=$(exec_with_timeout curl -s --connect-timeout 2 "$REMOTE_URL" | grep '^CURRENT_VERSION=' | cut -d= -f2 | tr -d '"')
    
    if [ -n "$REMOTE_VERSION" ] && [ "$REMOTE_VERSION" != "$CURRENT_VERSION" ]; then
        echo "‚ö†Ô∏è –î–æ—Å—Ç—É–ø–Ω–∞ –Ω–æ–≤–∞—è –≤–µ—Ä—Å–∏—è MOTD-–¥–∞—à–±–æ—Ä–¥–∞: $REMOTE_VERSION (—Ç–µ–∫—É—â–∞—è: $CURRENT_VERSION)"
        echo "üí° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: bash <(wget -qO- $REMOTE_URL) --force"
        echo ""
    fi
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –æ—Ç–º–µ—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    touch "$UPDATE_CHECK_FILE" 2>/dev/null
fi

ok="‚úÖ"
fail="‚ùå"
warn="‚ö†Ô∏è"
separator="‚îÄ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

CONFIG_GLOBAL="/etc/motdrc"
CONFIG_USER="$HOME/.motdrc"
[ -f "$CONFIG_GLOBAL" ] && source "$CONFIG_GLOBAL"
[ -f "$CONFIG_USER" ] && source "$CONFIG_USER"

# –ó–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
: "${SHOW_UPTIME:=true}"
: "${SHOW_LOAD:=true}"
: "${SHOW_CPU:=true}"
: "${SHOW_RAM:=true}"
: "${SHOW_DISK:=true}"
: "${SHOW_NET:=true}"
: "${SHOW_IP:=true}"
: "${SHOW_DOCKER:=true}"
: "${SHOW_SSH:=true}"
: "${SHOW_SECURITY:=true}"
: "${SHOW_UPDATES:=true}"
: "${SHOW_AUTOUPDATES:=true}"

# –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ö—ç—à–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ 30 —Å–µ–∫—É–Ω–¥
CACHE_FILE="/tmp/.motd_cache"
CACHE_TIME=30

if [ -f "$CACHE_FILE" ] && [ $(($(date +%s) - $(stat -c %Y "$CACHE_FILE"))) -lt $CACHE_TIME ]; then
    source "$CACHE_FILE"
else
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª
    uptime_str=$(exec_with_timeout uptime -p || echo "uptime unavailable")
    loadavg=$(exec_with_timeout cat /proc/loadavg | cut -d ' ' -f1-3 || echo "load unavailable")
    
    # CPU usage —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è top
    if command -v top >/dev/null 2>&1; then
        cpu_usage=$(exec_with_timeout top -bn1 | grep "Cpu(s)" | awk '{print 100 - $8 "%"}' | head -1)
        [ -z "$cpu_usage" ] && cpu_usage="n/a"
    else
        cpu_usage="top not available"
    fi
    
    mem_data=$(exec_with_timeout free -m | awk '/Mem:/ {printf "%.0f%% (%dMB/%dMB)", $3/$2*100, $3, $2}' || echo "memory info unavailable")
    
    disk_used=$(exec_with_timeout df -h / | awk 'NR==2 {print $5}' | tr -d '%' || echo "0")
    disk_line=$(exec_with_timeout df -h / | awk 'NR==2 {print $5 " (" $3 " / " $2 ")"}' || echo "disk info unavailable")
    
    if [ "$disk_used" -ge 95 ] 2>/dev/null; then
        disk_status="$fail $disk_line [CRITICAL: Free up space immediately!]"
    elif [ "$disk_used" -ge 85 ] 2>/dev/null; then
        disk_status="$warn $disk_line [Warning: High usage]"
    else
        disk_status="$ok $disk_line"
    fi

    # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: vnstat —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if command -v vnstat >/dev/null 2>&1; then
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ vnstat
        if vnstat -i eth0 --json >/dev/null 2>&1 || vnstat -i ens3 --json >/dev/null 2>&1; then
            traffic=$(exec_with_timeout vnstat --oneline | awk -F\; '{print $10 " ‚Üì / " $11 " ‚Üë"}')
            [ -z "$traffic" ] && traffic="vnstat: no data yet"
        else
            traffic="vnstat: not initialized (run: vnstat -i eth0 or similar)"
        fi
    else
        traffic="vnstat not installed"
    fi
    
    ip_local=$(exec_with_timeout hostname -I | awk '{print $1}' || echo "n/a")
    
    # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—É–±–ª–∏—á–Ω—ã–π IP —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
    ip_public=$(exec_with_timeout curl -s --connect-timeout 1 --max-time 2 ifconfig.me || echo "n/a")
    
    # IPv6 —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞–ª–∏—á–∏—è ip –∫–æ–º–∞–Ω–¥—ã
    if command -v ip >/dev/null 2>&1; then
        ip6=$(exec_with_timeout ip -6 addr show scope global | grep inet6 | awk '{print $2}' | cut -d/ -f1 | head -n1)
    else
        ip6="ip command not available"
    fi
    [ -z "$ip6" ] && ip6="n/a"

    # Docker –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
    if command -v docker >/dev/null 2>&1 && docker info >/dev/null 2>&1; then
        docker_total=$(exec_with_timeout docker ps -a -q | wc -l)
        docker_running=$(exec_with_timeout docker ps -q | wc -l)
        docker_stopped=$((docker_total - docker_running))
        docker_msg="$ok ${docker_running} running / ${docker_stopped} stopped"
        
        bad_containers=$(exec_with_timeout docker ps -a --filter "status=exited" --filter "status=restarting" --format '‚õî {{.Names}} ({{.Status}})' | head -3)
        if [ -n "$bad_containers" ]; then
            docker_msg="$fail Issues: $docker_running running / $docker_stopped stopped"
            docker_msg_extra=$(echo "$bad_containers" | sed 's/^/                    /')
        fi
    else
        docker_msg="$warn not available"
    fi

    ssh_users=$(exec_with_timeout who | wc -l)
    ssh_ips=$(exec_with_timeout who | awk '{print $5}' | tr -d '()' | sort | uniq | paste -sd ', ' -)

    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
    if command -v fail2ban-client >/dev/null 2>&1 && exec_with_timeout fail2ban-client status >/dev/null 2>&1; then
        fail2ban_status="$ok active"
    else
        fail2ban_status="$fail not available"
    fi

    if command -v ufw >/dev/null 2>&1; then
        ufw_status=$(exec_with_timeout ufw status | grep -i "Status" | awk '{print $2}')
        if [[ "$ufw_status" == "active" ]]; then
            ufw_status="$ok enabled"
        else
            ufw_status="$fail disabled"
        fi
    else
        ufw_status="$fail not installed"
    fi

    if exec_with_timeout systemctl is-active crowdsec >/dev/null 2>&1; then
        crowdsec_status="$ok active"
    else
        crowdsec_status="$fail not running"
    fi

    # SSH –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    ssh_port=$(grep -Ei '^Port ' /etc/ssh/sshd_config 2>/dev/null | awk '{print $2}' | head -n1)
    [ -z "$ssh_port" ] && ssh_port=22
    [ "$ssh_port" != "22" ] && ssh_port_status="$ok non-standard port ($ssh_port)" || ssh_port_status="$warn default port (22)"

    permit_root=$(exec_with_timeout sshd -T 2>/dev/null | grep -i permitrootlogin | awk '{print $2}')
    case "$permit_root" in
        yes) root_login_status="$fail enabled" ;;
        no) root_login_status="$ok disabled" ;;
        *) root_login_status="$warn limited ($permit_root)" ;;
    esac

    password_auth=$(grep -Ei '^PasswordAuthentication' /etc/ssh/sshd_config 2>/dev/null | awk '{print $2}')
    [ "$password_auth" != "yes" ] && password_auth_status="$ok disabled" || password_auth_status="$fail enabled"

    # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å —Ç–∞–π–º–∞—É—Ç–æ–º
    updates=$(exec_with_timeout apt list --upgradable 2>/dev/null | grep -v "Listing" | wc -l)
    update_msg="${updates} package(s) can be updated"

    # –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    auto_update_status=""
    if dpkg -s unattended-upgrades >/dev/null 2>&1 && command -v unattended-upgrade >/dev/null 2>&1; then
        if grep -q 'Unattended-Upgrade "1";' /etc/apt/apt.conf.d/20auto-upgrades 2>/dev/null; then
            if exec_with_timeout systemctl is-enabled apt-daily.timer >/dev/null 2>&1 && exec_with_timeout systemctl is-enabled apt-daily-upgrade.timer >/dev/null 2>&1; then
                if grep -q "Installing" /var/log/unattended-upgrades/unattended-upgrades.log 2>/dev/null; then
                    auto_update_status="$ok working"
                else
                    auto_update_status="$ok enabled"
                fi
            else
                auto_update_status="$warn config enabled, timers disabled"
            fi
        else
            auto_update_status="$warn installed, config disabled"
        fi
    else
        auto_update_status="$fail not installed"
    fi

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
    cat > "$CACHE_FILE" << CACHE_EOF
uptime_str="$uptime_str"
loadavg="$loadavg"
cpu_usage="$cpu_usage"
mem_data="$mem_data"
disk_status="$disk_status"
traffic="$traffic"
ip_local="$ip_local"
ip_public="$ip_public"
ip6="$ip6"
docker_msg="$docker_msg"
docker_msg_extra="$docker_msg_extra"
ssh_users="$ssh_users"
ssh_ips="$ssh_ips"
fail2ban_status="$fail2ban_status"
ufw_status="$ufw_status"
crowdsec_status="$crowdsec_status"
ssh_port_status="$ssh_port_status"
root_login_status="$root_login_status"
password_auth_status="$password_auth_status"
update_msg="$update_msg"
auto_update_status="$auto_update_status"
CACHE_EOF
fi

print_row() {
    local label="$1"
    local value="$2"
    printf " %-20s : %s\n" "$label" "$value"
}

print_section() {
  case "$1" in
    uptime)       print_row "System Uptime" "$uptime_str" ;;
    load)         print_row "Load Average" "$loadavg" ;;
    cpu)          print_row "CPU Usage" "$cpu_usage" ;;
    kernel)       print_row "Kernel" "$(uname -r)" ;;
    ram)          print_row "RAM Usage" "$mem_data" ;;
    disk)         print_row "Disk Usage" "$disk_status" ;;
    net)          print_row "Net Traffic" "$traffic" ;;
    ip)           print_row "IPv4/IPv6" "Local: $ip_local / Public: $ip_public / IPv6: $ip6" ;;
    docker)
      print_row "Docker" "$docker_msg"
      [ -n "$docker_msg_extra" ] && echo -e "$docker_msg_extra"
      ;;
    updates)      print_row "Apt Updates" "$update_msg" ;;
    autoupdates)
      print_row "Auto Updates" "$auto_update_status"
      case "$auto_update_status" in
        *"$fail"*)
          echo "üìå Auto-Upgrades not installed. To install and enable:"
          echo "   apt install unattended-upgrades -y"
          echo "   dpkg-reconfigure --priority=low unattended-upgrades"
          ;;
        *"timers disabled"*)
          echo "üìå Auto-Upgrades config enabled, but timers are off. To enable:"
          echo "   systemctl enable --now apt-daily.timer apt-daily-upgrade.timer"
          ;;
        *"config disabled"*)
          echo "üìå Auto-Upgrades installed, but config disabled. To fix:"
          echo "   echo 'APT::Periodic::Unattended-Upgrade \"1\";' >> /etc/apt/apt.conf.d/20auto-upgrades"
          echo "   systemctl restart apt-daily.timer apt-daily-upgrade.timer"
          ;;
      esac
      ;;
    ssh_block)
      echo " ~~~~~~ ‚Üì‚Üì‚Üì Security Block ‚Üì‚Üì‚Üì ~~~~~~"
      print_row "Fail2ban" "$fail2ban_status"
      print_row "CrowdSec" "$crowdsec_status"
      print_row "UFW Firewall" "$ufw_status"
      print_row "SSH Port" "$ssh_port_status"
      print_row "Root Login" "$root_login_status"
      print_row "Password Auth" "$password_auth_status"
      print_row "SSH Sessions" "$ssh_users"
      print_row "SSH IPs" "$ssh_ips"
      echo " ~~~~~~ ‚Üë‚Üë‚Üë Security Block ‚Üë‚Üë‚Üë ~~~~~~"
      ;;
  esac
}

echo "$separator"
echo " MOTD Dashboard ‚Äî powered by https://NeoNode.cc"
echo "$separator"
[ "$SHOW_UPTIME" = true ] && print_section uptime
[ "$SHOW_LOAD" = true ] && print_section load
[ "$SHOW_CPU" = true ] && print_section cpu
print_section kernel
[ "$SHOW_RAM" = true ] && print_section ram
[ "$SHOW_DISK" = true ] && print_section disk
[ "$SHOW_NET" = true ] && print_section net
[ "$SHOW_IP" = true ] && print_section ip
[ "$SHOW_DOCKER" = true ] && print_section docker
[ "$SHOW_SECURITY" = true ] && print_section ssh_block
[ "$SHOW_UPDATES" = true ] && print_section updates
[ "$SHOW_AUTOUPDATES" = true ] && print_section autoupdates

echo ""
printf " %-20s : %s\n" "Dashboard Ver" "$CURRENT_VERSION"
echo "$separator"
printf " %-20s : %s\n" "Config tool" "motd-config"
EOF

clear
echo "===================================================="
echo "üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä NeoNode MOTD (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è):"
echo "===================================================="
bash "$TMP_FILE"
echo "===================================================="

if [ "$FORCE_MODE" = true ]; then
    echo "‚öôÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è (--force)"
    mv "$TMP_FILE" "$DASHBOARD_FILE"
    if [ "$INSTALL_USER_MODE" = false ]; then
        chmod +x "$DASHBOARD_FILE"
    fi
    install_motd_config
    create_motd_global_config
    echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥: $DASHBOARD_FILE"
    echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ CLI —É—Ç–∏–ª–∏—Ç–∞: $MOTD_CONFIG_TOOL"
    echo "‚úÖ –°–æ–∑–¥–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: $CONFIG_GLOBAL"
    echo ""
    echo "üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:"
    echo "   ‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ 30 —Å–µ–∫—É–Ω–¥"
    echo "   ‚Ä¢ –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ (3 —Å–µ–∫)"
    echo "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞–∑ –≤ —á–∞—Å"
    echo "   ‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ /tmp/.motd_disabled"
    echo ""
    echo "üëâ –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ ‚Äî –≤—ã–ø–æ–ª–Ω–∏: motd-config"
    echo "üëâ –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è MOTD: touch /tmp/.motd_disabled"
    echo "üëâ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π MOTD –ø–æ—è–≤–∏—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—Ö–æ–¥–µ"

else
    echo "–ë—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞:"
    echo "üëâ –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–∞—à–±–æ—Ä–¥: $DASHBOARD_FILE"
    echo "üëâ –ë—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ CLI —É—Ç–∏–ª–∏—Ç–∞: $MOTD_CONFIG_TOOL"
    echo "üëâ –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: $CONFIG_GLOBAL"
    echo "üëâ –ë—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã –≤ –ø–∞–ø–∫–µ /etc/update-motd.d/"
    echo ""
    echo "üöÄ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:"
    echo "   ‚Ä¢ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ 30 —Å–µ–∫—É–Ω–¥"
    echo "   ‚Ä¢ –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ (3 —Å–µ–∫)"
    echo "   ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–∞–∑ –≤ —á–∞—Å"
    echo "   ‚Ä¢ –ë—ã—Å—Ç—Ä–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ /tmp/.motd_disabled"
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª
    if [ -t 0 ]; then
        read -p '‚ùì –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç—Ç–æ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π MOTD-–¥—ç—à–±–æ—Ä–¥? [y/N]: ' confirm < /dev/tty
    else
        echo "ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤ pipe-—Ä–µ–∂–∏–º–µ..."
        confirm="y"
    fi
    
    if [[ "$confirm" =~ ^[Yy]$ ]]; then
        mv "$TMP_FILE" "$DASHBOARD_FILE"
        if [ "$INSTALL_USER_MODE" = false ]; then
            chmod +x "$DASHBOARD_FILE"
            find /etc/update-motd.d/ -type f -not -name "99-dashboard" -exec chmod -x {} \;
        fi
        install_motd_config
        create_motd_global_config
        
        echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—à–±–æ—Ä–¥: $DASHBOARD_FILE"
        echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ CLI —É—Ç–∏–ª–∏—Ç–∞: $MOTD_CONFIG_TOOL"
        echo "‚úÖ –°–æ–∑–¥–∞–Ω –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥: $CONFIG_GLOBAL"
        echo ""
        echo "üëâ –î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–ª–æ–∫–æ–≤ ‚Äî –≤—ã–ø–æ–ª–Ω–∏: motd-config"
        echo "üëâ –î–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è MOTD: touch /tmp/.motd_disabled"
        echo "üëâ –û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π MOTD –ø–æ—è–≤–∏—Ç—Å—è –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –≤—Ö–æ–¥–µ"
    else
        echo "‚ùå –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞."
        rm -f "$TMP_FILE"
    fi
fi